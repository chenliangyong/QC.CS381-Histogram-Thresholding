
Project 1.2: You are to write an image processing method: thresholding
           You will ask the user for a threshold value, interactively.
	     

**************************************
Language:  C++ & Java
Due date:  C++ soft copy:  9/03/2016 Sunday before Midnight
 		Jave soft copy: 9/04/2016 Monday before Midnight
Due date:  C++ and Jave hard copy:  9/05/2016 Tuesday in class

*************************************

I. Input: a txt file representing a grey-scale image, 
	with the following format.

       //** the name of the input file should be in argv[1] for C++ argv[0] for Java
   
	#row #col min_val max_val
	n n n n n ... n
	n n n n n ... n
	:
	:
	n n n n n ... n

	where #row,  #col min_val and max_val are integers,
	follows by #row number line of #col integers, and
	0<n<64.

 	For example,
	
	4 6 1 12
	2 3 4 11 2 9
	5 6 11 2 10 7
	1 1 12 1 9 9
	4 5 6 9 9 9
	
II. Output: the name of the threshold result is generated by the program
	and should have the following format:
          thr_nnn where nnn is the threshold value given by the user. For example,
          if user gave the threshold value is 10, then the name of the output file should be
          thr_10 and if the threshold value is 38, then the name of the output file should be thr_38, etc.
	
   		
*******************************
III. Data structure:
*******************************
 	- numRows (int)
	- numCols (int)
	- minVal (int)
	- maxVal (int)

    - methods:
	- constructor(s) // read and assign values to numRows,...
				// dynamically allocate the thr_Ary size of numRows by numCols
				
	- computeThreshold
	      
*************************************
III. Algorithms for computeThreshold
*************************************
	
step 0: - open input file
	   
step 1: - read the image header from input file, and store the four numbers. 

step 2: - thr_value <- ask the user 
	   - open the output file with the required name
	   - write the header (the four numbers) to the output file
	         
step 3: // process the input file from left to right and top to bottom
        // using i from 0 to numRows - 1 and j from 0 to numCols - 
	  // make sure the output is a 2D array with header!!!
      
	pixel_val <- read from input 
     if pixel_val < thr_value
        output 0
     else        
	   output 1

step 4: repeat step 3 until input file is empty

step 5: close input and output files.
 
