
Project 1.1: You are to write an image processing method: computeHistogram
	     

**************************************
Language:  C++ & Java
Due date:  C++ soft copy:  9/03/2016 Sunday before Midnight
 		Jave soft copy: 9/04/2016 Monday before Midnight
Due date:  C++ and Jave hard copy:  9/05/2016 Tuesday in class

*************************************

I. Input: a txt file representing a grey-scale image, 
	with the following format. The name of the input file should be in argv[1].
   
	#row #col min_val max_val
	n n n n n ... n
	n n n n n ... n
	:
	:
	n n n n n ... n

	where #row,  #col min_val and max_val are integers,
	follows by #row number line of #col integers, and
	0<n<64.

 	For example,
	
	4 6 1 12
	2 3 4 11 2 9
	5 6 11 2 10 7
	1 1 12 1 9 9
	4 5 6 9 9 9
	
II. Output: //** the name of the input file to be in argv[2]
   
	Histogram: Read the input file(image); compute the statistic counting 
	   of pixel values in the input image and print the resulting histogram.
	      for the above example you may have an output like:
	( 0):0
	( 1):3 +++
	( 2):3 +++
	( 3):1 +
	( 4):2 ++
	( 5):2 ++
	( 6):2 ++
	( 7):1 +
	( 8):0
	( 9):6 ++++++
	(10):1 +
	(11):2 ++
	(12):1 +
         
	======>>> if the count is greater than 80, the length of one text line on the paper
			should only print 80 +'s.
	
*******************************
III. Data structure:
*******************************
 
	- histogram (int*) a 1D array, need to dynamically allocate at run time.
	- numRows (int)
	- numCols (int)
	- minVal (int)
	- maxVal (int)

    - methods:
	- constructor(s) // need to dynamically allocate the histogram array 
				and assign values to numRows,..., etc.
	
   	- computeHistogram
	
*******************************
VI. Algorithm for Histogram
*******************************
  
step 0: - open input and output files
	   
step 1: - read the image header from input file, the four numbers. 
  	   - dynamically allocate the histogram array
        - initial the historgram array to 0

step 2: // process the input file from left to right and top to bottom
      
	p(i,j) <- read from input         
	hitogram[p(i,j)]++

step 3: repeat step 2 until the file is empty

step 4: output histogram array to output file

step 5: close input file and output file
 
	